# Generated by Django 3.2.4 on 2022-12-05 11:07

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
from django.utils.timezone import utc
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DzenUser',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('screen_name', models.CharField(max_length=255)),
                ('followers', models.IntegerField(default=0)),
                ('date_added', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('sphinx_id', models.CharField(max_length=4096)),
                ('name', models.CharField(max_length=255)),
                ('avatar', models.CharField(max_length=255)),
                ('last_modified', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('is_verified', models.BooleanField(default=0)),
                ('url', models.CharField(max_length=4096)),
            ],
            options={
                'db_table': 'prsr_parser_dzen_user',
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('created_date', models.DateField(default=datetime.datetime(1, 1, 1, 0, 0, tzinfo=utc))),
                ('owner_id', models.IntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('likes', models.IntegerField(default=0)),
                ('last_parsing', models.DateTimeField(default=datetime.datetime(1, 1, 1, 0, 0, tzinfo=utc))),
                ('taken', models.IntegerField(default=0)),
                ('sphinx_id', models.CharField(max_length=4096)),
                ('comments', models.IntegerField(default=0)),
                ('content_hash', models.CharField(default=None, max_length=4096)),
                ('last_modified', models.DateTimeField(default=django.utils.timezone.now)),
                ('url', models.CharField(max_length=4096)),
            ],
            options={
                'db_table': 'prsr_parser_dzen_post',
            },
        ),
        migrations.CreateModel(
            name='PostContent',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('text', models.CharField(max_length=10000)),
            ],
            options={
                'db_table': 'prsr_parser_dzen_post_content',
            },
        ),
        migrations.CreateModel(
            name='PostImage',
            fields=[
                ('id', models.IntegerField(primary_key=True, serialize=False)),
                ('image', models.CharField(max_length=10000)),
            ],
            options={
                'db_table': 'prsr_parser_dzen_post_image',
            },
        ),
        migrations.CreateModel(
            name='UserDescription',
            fields=[
                ('id', models.CharField(max_length=255, primary_key=True, serialize=False)),
                ('description', models.CharField(max_length=4096)),
                ('last_modified', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'prsr_parser_dzen_user_description',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
